// Declares clang::SyntaxOnlyAction.
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include <boost/process.hpp>
#include <boost/filesystem.hpp>
#include <iostream>
#include <sstream>

// Declares llvm::cl::extrahelp.
#include "llvm/Support/CommandLine.h"
using namespace boost::process;
using namespace clang::tooling;
using namespace llvm;

#define CPP_COMP 1
#define COMPILER_NAME "eosio.cpp"
#include "eosio.compiler_options.ipp"

static Options CreateClangOptions() {
   std::stringstream comp_ss;
   std::stringstream link_ss;
   std::string output_fn;
   bool link = true;

   comp_ss << " --target=wasm32 -nostdlib -ffreestanding -fno-builtin ";
   comp_ss << " -Xclang -load -Xclang ${EOSIO_APPLY_LIB} ";
   comp_ss << " -DBOOST_DISABLE_ASSERTS -DBOOST_EXCEPTION_DISABLE ";
   comp_ss << " -I${Boost_INCLUDE_DIR} ";
   comp_ss << " -I${Boost_INCLUDE_DIR} ";
   comp_ss << " --sysroot=${EOSIO_INSTALL} ";
   comp_ss << " -I${EOSIO_INSTALL}/include/ -I${EOSIO_INSTALL}/include/libcxx -I${EOSIO_INSTALL}/include/libc ";
   comp_ss << " -fno-rtti -fno-exceptions ";
   if (!fno_cfl_aa_opt) {
      comp_ss << " -mllvm -use-cfl-aa-in-codegen=both ";
      link_ss << " -fno-cfl-aa ";
   }
   for ( auto input_filename : input_filename_opt )
      comp_ss << input_filename << " ";
   if (!isysroot_opt.empty())
      comp_ss << " -isysroot " << isysroot_opt << " ";
   if (!isystem_opt.empty())
      comp_ss << " -isystem " << isystem_opt << " "; 
   if (CC_opt)
      comp_ss << " -CC ";
   if (C_opt)
      comp_ss << " -C ";
   if (c_opt) {
      comp_ss << " -c ";
      link = false;
   }
   if (dD_opt)
      comp_ss << " -dD ";
   if (dI_opt)
      comp_ss << " -dI ";
   if (dM_opt)
      comp_ss << " -dM ";
   for ( auto define : D_opt )
      comp_ss << "-D" << define << " ";
   if (emit_ast_opt)
      comp_ss << " -emit-ast ";
   if (emit_llvm_opt)
      comp_ss << " -emit-llvm ";
   if (E_opt)
      comp_ss << " -E ";
   if (faligned_allocation_opt)
      comp_ss << " -faligned-allocation ";
   if (fcoroutine_ts_opt)
      comp_ss << " -fcoroutine-ts ";
   if (finline_functions_opt)
      comp_ss << " -finline-functions ";
   if (finline_hint_functions_opt)
      comp_ss << " -finline-hint-functions ";
   if (fmerge_all_constants_opt)
      comp_ss << " -fmerge-all-constants ";
   if (fno_elide_constructors_opt)
      comp_ss << " -fno-elide-constructors ";
   if (fno_lto_opt) {
      link_ss << " --lto-O0 ";
      if (!lto_opt_opt.empty())
         std::cerr << "Warning : lto disabled but lto optimization level given\n";
   }
   else if (!lto_opt_opt.empty())
      link_ss << " --lto-" << lto_opt_opt << " ";
   else
      link_ss << " --lto-O3 ";
   if (fstack_protector_all_opt)
      comp_ss << " -fstack-protector-all ";
   if (fstack_protector_strong_opt)
      comp_ss << " -fstack-protector-strong ";
   if (fstack_protector_opt)
      comp_ss << " -fstack-protector ";
   if (fstrict_enums_opt)
      comp_ss << " -fstrict-enums ";
   if (fstrict_return_opt)
      comp_ss << " -fstrict-return ";
   if (fstrict_vtable_pointers_opt)
      comp_ss << " -fstrict-vtable-pointers ";
   for ( auto include : include_opt )
      comp_ss << " -include=" << include << " ";
   for ( auto inc_dir : I_opt )
      comp_ss << " -I" << inc_dir << " ";
   for ( auto lib_dir : L_opt )
      link_ss << " -L" << lib_dir << " ";
   for ( auto library : l_opt )
      link_ss << " -l" << library << " ";
   if (o_opt.empty()) {
      comp_ss << " -o a.out ";
      link_ss << " a.out ";
      link_ss << " -o a.out";
      output_fn = "a.out";
   }
   else {
      comp_ss << " -o " << o_opt << " ";
      link_ss << o_opt << " ";
      link_ss << " -o " << o_opt << " ";
      output_fn = o_opt;
   }
   if (O_opt.empty())
      comp_ss << " -O3 ";
   else
      comp_ss << " -O" << O_opt << " ";
   if (std_opt.empty())
      comp_ss << " -std=c++14 ";
   else
      comp_ss << " -std=" << std_opt << " ";
   if (S_opt) {
      comp_ss << " -S ";
      link = false;
   }
   if (v_opt)
      comp_ss << " -v ";
   if (w_opt)
      comp_ss << " -w ";
   for ( auto warn : W_opt )
      comp_ss << " -W" << warn << " ";
   
   if (link)
      comp_ss << " -c ";

   return {comp_ss.str(), link_ss.str(), output_fn, link};
}

int main(int argc, const char **argv) {

  cl::SetVersionPrinter([](llvm::raw_ostream& os) {
        os << COMPILER_NAME << " version " << ${EOSIO_VER_MAJOR} << "." << ${EOSIO_VER_MINOR} << "." << ${EOSIO_VER_REVISION} << "\n";
  });
  cl::ParseCommandLineOptions(argc, argv, std::string(COMPILER_NAME)+" (Eosio C++ -> WebAssembly compiler)");
  Options opts = CreateClangOptions();

  std::string line;
  // first compile
  ipstream comp_stream;
  std::string instr = std::string("${CMAKE_INSTALL_PREFIX}/bin/clang")+opts.compiler;
  std::error_code ec;
  child compile(instr.c_str(), std_out > comp_stream);
  line = "";
  while (comp_stream && std::getline(comp_stream, line) && !line.empty())
     std::cerr << line << std::endl;
  compile.wait();

  if ( !boost::filesystem::exists( opts.output_fn.c_str() ) )
     return -1;

  // then link
  if (opts.link) {
     ipstream link_stream;
     std::string linkstr = std::string("${CMAKE_INSTALL_PREFIX}/bin/eosio.ld"+opts.linker);
     child link(linkstr.c_str(), std_out > link_stream);
     line = "";
     while (link_stream && std::getline(link_stream, line) && !line.empty())
        std::cerr << line << std::endl;
     link.wait();

     if ( !boost::filesystem::exists( opts.output_fn.c_str() ) )
        return -1;

     // finally any post processing
     ipstream final_stream;
     std::string finalstr = std::string("${EOSIO_INSTALL}/../bin/stripbss "+opts.output_fn);
     child finalp(finalstr.c_str(), std_out > final_stream);
     line = "";
     while (final_stream && std::getline(final_stream, line) && !line.empty())
        std::cerr << line << std::endl;
     finalp.wait();
     if ( !boost::filesystem::exists( opts.output_fn.c_str() ) )
        return -1;

  }
  return 0;
}
