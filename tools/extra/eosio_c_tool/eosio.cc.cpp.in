// Declares clang::SyntaxOnlyAction.
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include <boost/process.hpp>
#include <boost/filesystem.hpp>
#include <iostream>
#include <sstream>

// Declares llvm::cl::extrahelp.
#include "llvm/Support/CommandLine.h"
using namespace boost::process;
using namespace clang::tooling;
using namespace llvm;

#define CPP_COMP 0
#define COMPILER_NAME "eosio.cc"
#include "eosio.compiler_options.ipp"

int main(int argc, const char **argv) {

  cl::SetVersionPrinter([](llvm::raw_ostream& os) {
        os << COMPILER_NAME << " version " << ${EOSIO_VER_MAJOR} << "." << ${EOSIO_VER_MINOR} << "." << ${EOSIO_VER_REVISION} << "\n";
  });
  cl::ParseCommandLineOptions(argc, argv, std::string(COMPILER_NAME)+" (Eosio C -> WebAssembly compiler)");
  Options opts = CreateOptions();

  std::string line;
  // first compile
  ipstream comp_stream;
  std::string instr = std::string("./clang")+opts.compiler;
  try {
     child compile(instr.c_str(), std_out > comp_stream);
     line = "";
     while (comp_stream && std::getline(comp_stream, line) && !line.empty())
        std::cerr << line << std::endl;
     compile.wait();

     if ( !boost::filesystem::exists( opts.output_fn.c_str() ) )
        return -1;
  } catch ( boost::process::process_error& e ) {
     std::cerr << e.what() << std::endl;
     return -1;
  }

  // then link
  //
  if (opts.link) {
     ipstream link_stream;
     std::string linkstr = std::string("./eosio.ld "+opts.linker);
     try {
        child link(linkstr.c_str(), std_out > link_stream);
        line = "";
        while (link_stream && std::getline(link_stream, line) && !line.empty())
           std::cerr << line << std::endl;
        link.wait();

        if ( !boost::filesystem::exists( opts.output_fn.c_str() ) )
           return -1;
     } catch ( boost::process::process_error& e ) {
        std::cerr << e.what() << std::endl;
        return -1; 
     }
  }
  return 0;
}
