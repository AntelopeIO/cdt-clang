// Declares clang::SyntaxOnlyAction.
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include "clang/ASTMatchers/ASTMatchers.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/AST/DeclCXX.h"
#include "clang/AST/Expr.h"
#include "clang/Basic/Builtins.h"
#include "eosio/utils.hpp"
#include "eosio/gen.hpp"
#include "eosio/whereami/whereami.hpp"

#include <exception>
#include <iostream>
#include <fstream>
#include <sstream>
#include <memory>
#include <set>
#include <map>
#include <chrono>
#include <ctime>

#include "abi.hpp"
#include <jsoncons/json.hpp>

// Declares llvm::cl::extrahelp.
#include "llvm/Support/CommandLine.h"
using namespace clang::tooling;
using namespace clang::ast_matchers;
using namespace llvm;
using namespace eosio;
using namespace eosio::cdt;
using jsoncons::json;
using jsoncons::ojson;

struct abigen_exception : public std::exception {
   virtual const char* what() const throw() {
      return "eosio.abigen fatal error";
   }
} abigen_ex;


DeclarationMatcher function_decl_matcher = cxxMethodDecl().bind("eosio_abis");
DeclarationMatcher record_decl_matcher = cxxRecordDecl().bind("eosio_abis");
TypeMatcher typedef_decl_matcher = type().bind("eosio_abis");

class abigen : public generation_utils {
   public:
   abigen() : generation_utils([&](){throw abigen_ex;}) {}
   void add_typedef( const clang::QualType& t ) {
      abi_typedef ret;
      ret.new_type_name = get_base_type_name( t );
      ret.type = get_type_alias( t );
      _abi.typedefs.insert(ret);
   }

   void add_action( const clang::CXXRecordDecl* decl ) {
      abi_action ret;
      auto action_name = decl->getEosioActionAttr()->getName();

      if (action_name.empty()) {
         try {
            validate_name( decl->getName().str(), error_handler );
         } catch (...) {
            std::cout << "Error, name <" <<decl->getName().str() << "> is an invalid EOSIO name.\n";
            throw;
         }
         ret.name = decl->getName().str();
      }
      else {
         try {
            validate_name( action_name.str(), error_handler );
         } catch (...) {
            std::cout << "Error, name <" << action_name.str() << "> is an invalid EOSIO name.\n";
            throw;
         }
         ret.name = action_name.str();
      }
      ret.type = decl->getName().str();
      _abi.actions.insert(ret);
   }

   void add_action( const clang::CXXMethodDecl* decl ) {
      abi_action ret;

      auto action_name = decl->getEosioActionAttr()->getName();
      if (action_name.empty()) {
         try {
            validate_name( decl->getNameAsString(), error_handler );
         } catch (...) {
            std::cout << "Error, name <" <<decl->getNameAsString() << "> is an invalid EOSIO name.\n";
         }
         ret.name = decl->getNameAsString();
      }
      else {
         try {
            validate_name( action_name.str(), error_handler );
         } catch (...) {
            std::cout << "Error, name <" << action_name.str() << "> is an invalid EOSIO name.\n";
         }
         ret.name = action_name.str();
      }
      ret.type = decl->getNameAsString();
      _abi.actions.insert(ret);
   }

   void add_struct( const clang::CXXRecordDecl* decl ) {
      abi_struct ret;
      if ( decl->getNumBases() > 1 ) {
         std::cerr << "Error: abigen can only handle single inheritance <class " << decl->getName().str() << ">\n";
         throw abigen_ex;
      }
      else if ( decl->getNumBases() == 1 )
         ret.base = get_type(decl->bases_begin()->getType());

      for ( auto field : decl->fields() ) {
         ret.fields.push_back({field->getName().str(), get_type(field->getType())});
      }

      ret.name = decl->getName().str();
      _abi.structs.insert(ret);
   }

   void add_struct( const clang::CXXMethodDecl* decl ) {
      abi_struct new_struct;
      new_struct.name = decl->getNameAsString();
      for (auto param : decl->parameters() ) {
         auto param_type = param->getType().getNonReferenceType().getUnqualifiedType();
         if (is_ignorable(param->getType()))
            param_type = get_ignored_type( param->getType() );

         if (!is_builtin_type( param_type)) {
            if (is_aliasing(param_type))
               add_typedef(param_type);
            if (param_type.getTypePtr()->isRecordType())
               add_struct( param_type.getTypePtr()->getAsCXXRecordDecl() );
         }
         new_struct.fields.push_back({param->getNameAsString(), get_type(param_type)});
      }
      _abi.structs.insert(new_struct);
   }

   std::string to_index_type( std::string t ) {
      return "i64";
   }

   void add_table( const clang::CXXRecordDecl* decl ) {
      abi_table t;

      t.type = decl->getNameAsString();
      auto table_name = decl->getEosioTableAttr()->getName();
      if (!table_name.empty()) {
         try {
            validate_name( table_name.str(), error_handler );
         } catch (...) {
         }
         t.name = table_name.str();
      }
      else {
         t.name = std::string("eosio_ptable:::")+t.type;
         
      }

      if (_abi.ptables.find(t.type) == _abi.ptables.end())
         _abi.ptables.emplace(t.type, std::set<abi_table>{t});
      else
         _abi.ptables.at(t.type).insert(t);
      _abi.tables.insert(t);
      /*
      // get the primary_key name
      for ( auto method : decl->methods() ) {
         if ( method->getName() == "primary_key" ) 
            if ( auto cs = dyn_cast<clang::CompoundStmt>(method->getBody()) )
               if ( auto ret = dyn_cast<clang::ReturnStmt>(cs->body_front()) ) {
                  if ( auto me = dyn_cast<clang::MemberExpr>(ret->getRetValue()->IgnoreImpCasts()) ) {
                     auto name = me->getMemberNameInfo().getName().getAsString();
                     t.key_names.push_back(name);
                     for ( auto field : decl->fields() ) {
                        if ( field->getName().str() == name ) {
                           auto type = get_type( field->getType() );
                           t.key_types.push_back(type);
                           t.index_type = to_index_type(type);
                        }
                     }
                     abi.tables.insert(t);
                  }
               }
      }
      */
   }

   void add_multi_index_table( const clang::TemplateSpecializationType* type ) {
      abi_table t;
      if ( type->getNumArgs() >= 2 ) {
         if ( clang::CallExpr* first = dyn_cast<clang::CallExpr>(type->getArg(0).getAsExpr()) ) {
            if ( first->getNumArgs() == 1 ) {
               if ( clang::StringLiteral* n = dyn_cast<clang::StringLiteral>(first->getArg(0)->IgnoreImpCasts()) ) {
                  clang::QualType second = type->getArg(1).getAsType();
                  t.name = n->getString().str();
                  t.type = get_type(second);
                  if (_abi.ptables.find(t.type) == _abi.ptables.end())
                     _abi.ptables.emplace(t.type, std::set<abi_table>{t});
                  else
                     _abi.ptables.at(t.type).insert(t);
                  int past_primary = 0;
                  for ( auto& arg : type->template_arguments() ) {
                     if ( past_primary < 2 ) {
                        past_primary++;
                        continue;
                     }
                  }
               }
            }
         }
      }
   }

   std::string generate_json_comment() {
      std::stringstream ss;
      ss << "This file was generated with eosio-abigen.";
      ss << " DO NOT EDIT ";
      auto t = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
      ss << std::ctime(&t);
      auto output = ss.str();
      return output.substr(0, output.length()-1); // remove the newline character
   }

   ojson struct_to_json( const abi_struct& s ) {
      ojson o;
      o["name"] = s.name;
      o["base"] = s.base;
      o["fields"] = ojson::array();
      for ( auto field : s.fields ) {
         ojson f;
         f["name"] = field.name;
         f["type"] = field.type;
         o["fields"].push_back(f);
      }
      return o;
   }

   ojson typedef_to_json( const abi_typedef& t ) {
      ojson o;
      o["new_type_name"] = t.new_type_name;
      o["type"]          = t.type;
      return o;
   }

   ojson action_to_json( const abi_action& a ) {
      ojson o;
      o["name"] = a.name;
      o["type"] = a.type;
      o["ricardian_contract"] = a.ricardian_contract;
      return o;
   }



   ojson table_to_json( const abi_table& t ) {
      ojson o;
      o["name"] = t.name;
      o["type"] = t.type;
      o["index_type"] = "i64";
      o["key_names"] = ojson::array();
      o["key_types"] = ojson::array();
      /*
      for ( auto name : abi.ptables.at(t.type).key_names ) 
         o["key_names"].push_back(name);
      for ( auto type : abi.ptables.at(t.type).key_types ) 
         o["key_types"].push_back(type);
      */
      return o;
   }

   ojson to_json() {
      ojson o;
      o["____comment"] = generate_json_comment();
      o["version"]     = _abi.version;
      o["structs"]     = ojson::array();
      for ( auto s : _abi.structs ) {
         o["structs"].push_back(struct_to_json(s));
      }
      o["types"]       = ojson::array();
      for ( auto t : _abi.typedefs ) {
         o["types"].push_back(typedef_to_json( t ));
      }
      o["actions"]     = ojson::array();
      for ( auto a : _abi.actions ) {
         o["actions"].push_back(action_to_json( a ));
      }
      o["tables"]     = ojson::array();
      for ( auto t : _abi.tables ) {
         for ( auto _t : _abi.ptables.at(t.type) ) {
            if ( !_t.name.empty() && _t.name.find("eosio_ptable:::") == std::string::npos )
               o["tables"].push_back(table_to_json( _t));
         }
      }
      o["ricardian_clauses"]  = ojson::array();
      o["abi_extensions"]     = ojson::array();
      return o;
   }

   abi& get_abi_ref() { return _abi; }

   void set_contract_name( const std::string& cn ) { contract_name = cn; }
   std::string get_contract_name()const { return contract_name; }

   private: 
      abi _abi;
      std::string contract_name;
};

abigen& get_abigen_ref() {
   static abigen ag;
   return ag;
}

class EosioMethodMatcher : public MatchFinder::MatchCallback {
   public:
      virtual void run( const MatchFinder::MatchResult& res ) {
         if (const clang::CXXMethodDecl* decl = res.Nodes.getNodeAs<clang::CXXMethodDecl>("eosio_abis")->getCanonicalDecl()) {
            abi abi;
            if (decl->isEosioAction() && abigen::is_eosio_contract(decl, get_abigen_ref().get_contract_name())) {
               get_abigen_ref().add_struct(decl);
               get_abigen_ref().add_action(decl);
               auto params = decl->parameters();
               for (auto param : params) {
                  abi_struct abis;
                  if (abigen::is_ignorable(param->getType()))
                     continue;

                  if (param->getType().getTypePtr()->isRecordType() && !get_abigen_ref().is_builtin_type(param->getType())) {
                     get_abigen_ref().add_struct(param->getType().getTypePtr()->getAsCXXRecordDecl());
                  }
               }
            }
         }
      }
   
};

class EosioRecordMatcher : public MatchFinder::MatchCallback {
   public:
      virtual void run( const MatchFinder::MatchResult& res ) {
         if (const clang::TemplateSpecializationType* type = res.Nodes.getNodeAs<clang::TemplateSpecializationType>("eosio_abis")) {
            get_abigen_ref().add_multi_index_table( type );
         }

         if (const clang::CXXRecordDecl* decl = res.Nodes.getNodeAs<clang::CXXRecordDecl>("eosio_abis")) {
            if (decl->isEosioAction() && abigen::is_eosio_contract(decl, get_abigen_ref().get_contract_name())) {
               get_abigen_ref().add_struct(decl);
               get_abigen_ref().add_action(decl);
            }
            if (decl->isEosioTable() && abigen::is_eosio_contract(decl, get_abigen_ref().get_contract_name())) {
               get_abigen_ref().add_struct(decl);
               auto table_name = decl->getEosioTableAttr()->getName();
               get_abigen_ref().add_table(decl);
            }
         }
      }
};

int main(int argc, const char **argv) {

   cl::SetVersionPrinter([](llvm::raw_ostream& os) {
        os << "eosio-abigen version " << ${EOSIO_VER_MAJOR} << "." << ${EOSIO_VER_MINOR} << "." << ${EOSIO_VER_REVISION} << "\n";
  });
   cl::OptionCategory cat("eosio-abigen", "generates an abi from C++ project input");

   cl::opt<std::string> abidir(
    "output",
    cl::desc("Set the output filename and fullpath"),
    cl::Required,
    cl::cat(cat));
   cl::opt<std::string> contract_name(
    "contract",
    cl::desc("Set the contract name"),
    cl::Required,
    cl::cat(cat));
   cl::opt<bool> def(
    "default",
    cl::desc("<ignored>"),
    cl::Hidden,
    cl::cat(cat));

   std::vector<std::string> options;
   for (size_t i=0; i < argc; i++) {
      options.push_back(argv[i]);
   }
   bool has_dash_dash = false;
   for (auto opt : options) {
      if ( opt.compare("--") == 0 ) {
         has_dash_dash = true;
         break;
      }
   }
   if (!has_dash_dash)
      options.push_back("--");
   options.push_back("--target=wasm32");
   options.push_back("-nostdlib");
   options.push_back("-ffreestanding");
   options.push_back("-fno-builtin");
   options.push_back("-fno-rtti");
   options.push_back("-fno-exceptions");
   options.push_back("-I${Boost_INCLUDE_DIRS}");
   options.push_back("-Wno-everything");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../include/libcxx");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../include/libc");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../include");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../../../../../libraries/libc++/libcxx/include");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../../../../../libraries/libc/musl/include");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../../../../../libraries");
   options.push_back(std::string("-I")+eosio::cdt::whereami::where()+"/../../../../../libraries/boost/include");

   int size = options.size();
   const char** new_argv = new const char*[size];
   for (size_t i=0; i < size; i++)
      new_argv[i] = options[i].c_str();

   CommonOptionsParser opts( size, new_argv, cat, 0 );

   ClangTool tool( opts.getCompilations(), opts.getSourcePathList());
   get_abigen_ref().set_contract_name(contract_name);
   EosioMethodMatcher eosio_method_matcher;
   EosioRecordMatcher eosio_record_matcher;
   MatchFinder finder;
   finder.addMatcher(function_decl_matcher, &eosio_method_matcher);
   finder.addMatcher(record_decl_matcher, &eosio_record_matcher);
   finder.addMatcher(typedef_decl_matcher, &eosio_record_matcher);
   int tool_run = -1;
   try {
      tool_run = tool.run(newFrontendActionFactory(&finder).get());

      std::ofstream output(abidir);
      output << pretty_print(get_abigen_ref().to_json());
      output.close();
   } catch (std::exception& ex) {
      std::cout << ex.what() << "\n";
      tool_run = -1;
   } 

   return tool_run;
}
